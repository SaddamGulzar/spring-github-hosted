name: Java CI/CD with Docker (Safe Deployment)

on:
  push:
    branches: ["main"]

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VM_IP }} >> ~/.ssh/known_hosts

      - name: Build & Deploy on VM
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_IP }} << 'EOF'
            set -e

            # -------------------------------
            # Install required packages if missing
            # -------------------------------
            command -v wget >/dev/null || sudo apt-get install -y wget
            command -v curl >/dev/null || sudo apt-get install -y curl
            command -v git >/dev/null || sudo apt-get install -y git
            command -v java >/dev/null || sudo apt-get install -y openjdk-17-jdk

            export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
            export PATH=$JAVA_HOME/bin:$PATH

            # -------------------------------
            # Install Docker safely
            # -------------------------------
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sh get-docker.sh
              sudo usermod -aG docker $USER
            fi

            # -------------------------------
            # Prepare project directory
            # -------------------------------
            PROJECT_DIR=~/spring-github-hosted
            if [ ! -d "$PROJECT_DIR" ]; then
              git clone git@github.com:SaddamGulzar/spring-github-hosted.git $PROJECT_DIR
            fi
            cd $PROJECT_DIR
            git fetch --all
            git reset --hard origin/main

            # Make wrappers executable
            [ -f "./mvnw" ] && chmod +x ./mvnw
            [ -f "./gradlew" ] && chmod +x ./gradlew

            # -------------------------------
            # Detect build tool and build JAR
            # -------------------------------
            if [ -f "pom.xml" ] || [ -f "mvnw" ]; then
              BUILD_TOOL="maven"
              ./mvnw clean package -DskipTests
              JAR_FILE=$(ls target/*.jar | head -n 1)
            elif [ -f "build.gradle" ] || [ -f "build.gradle.kts" ] || [ -f "gradlew" ]; then
              BUILD_TOOL="gradle"
              ./gradlew clean build -x test
              JAR_FILE=$(ls build/libs/*.jar | head -n 1)
            else
              echo "No Maven/Gradle build file found!"
              exit 1
            fi

            echo "Using JAR: $JAR_FILE"

            # -------------------------------
            # Cleanup old spring-app container/image only
            # -------------------------------
            if docker ps -aq -f name=spring-app; then
              docker rm -f spring-app || true
            fi
            if docker images -q spring-app:latest; then
              docker rmi -f spring-app:latest || true
            fi

            # -------------------------------
            # Free port 8086 if in use
            # -------------------------------
            if lsof -t -i :8086; then
              sudo lsof -t -i :8086 | xargs sudo kill -9 || true
            fi

            # -------------------------------
            # Build Docker image and run container
            # -------------------------------
            docker build --build-arg JAR_FILE=$JAR_FILE -t spring-app:latest .
            docker run -d \
              --name spring-app \
              -p 8086:8086 \
              -e SERVER_PORT=8086 \
              spring-app:latest || \
            (echo "Container failed. Logs:" && docker logs spring-app && exit 1)

            # -------------------------------
            # Clean build caches to save space
            # -------------------------------
            rm -rf ~/.m2/repository || true
            rm -rf ~/.gradle/caches/ || true
            sudo apt-get clean
          EOF

  test:
    runs-on: ubuntu-latest
    needs: build-deploy

    steps:
      - name: Wait for app to be ready
        run: |
          echo "Waiting for app on port 8086..."
          MAX_RETRIES=30
          COUNT=0
          until curl -s http://${{ secrets.VM_IP }}:8086/actuator/health || [ $COUNT -ge $MAX_RETRIES ]; do
            echo "App not ready yet. Retrying in 5s..."
            sleep 5
            COUNT=$((COUNT+1))
          done
          if [ $COUNT -ge $MAX_RETRIES ]; then
            echo "App did not start in time. Fetching container logs..."
            ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_IP }} "docker logs spring-app || true"
            exit 1
          fi
          echo "App is up and running!"

      - name: Run tests on VM
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_IP }} << EOF
            cd ~/spring-github-hosted
            if [ -f "pom.xml" ]; then
              ./mvnw test
            elif [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
              ./gradlew test
            fi
          EOF
