name: CI/CD for Spring App

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VM_IP }} >> ~/.ssh/known_hosts

      - name: Build & Deploy on VM
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_IP }} << 'EOF'
            set -e
            APP_NAME="spring-app"
            APP_PORT=8086
            PROJECT_DIR=~/spring-github-hosted

            # -------------------------------
            # Prepare project directory
            # -------------------------------
            if [ ! -d "$PROJECT_DIR" ]; then
              git clone git@github.com:SaddamGulzar/spring-github-hosted.git $PROJECT_DIR
            fi
            cd $PROJECT_DIR
            git fetch --all
            git reset --hard origin/main

            # Make wrappers executable
            [ -f "./mvnw" ] && chmod +x ./mvnw
            [ -f "./gradlew" ] && chmod +x ./gradlew

            # -------------------------------
            # Detect build tool and build JAR
            # -------------------------------
            if [ -f "pom.xml" ] || [ -f "mvnw" ]; then
              ./mvnw clean package -DskipTests
              JAR_FILE=$(ls target/*.jar | head -n 1)
            elif [ -f "build.gradle" ] || [ -f "gradlew" ]; then
              ./gradlew clean build -x test
              JAR_FILE=$(ls build/libs/*.jar | head -n 1)
            else
              echo "No Maven/Gradle build file found!"
              exit 1
            fi

            echo "JAR built at: $JAR_FILE"

            # -------------------------------
            # Stop old container if exists
            # -------------------------------
            if docker ps -aq -f name=$APP_NAME; then
              docker rm -f $APP_NAME || true
            fi

            # Free port if in use
            if lsof -t -i :$APP_PORT; then
              sudo lsof -t -i :$APP_PORT | xargs sudo kill -9 || true
            fi

            # -------------------------------
            # Build Docker image
            # -------------------------------
            cp $JAR_FILE app.jar

            cat > Dockerfile.temp << DOCKER_EOF
            FROM eclipse-temurin:17-jdk-alpine
            WORKDIR /app
            COPY app.jar app.jar
            EXPOSE $APP_PORT
            ENTRYPOINT ["java","-jar","app.jar","--server.port=$APP_PORT"]
            DOCKER_EOF

            docker build -f Dockerfile.temp -t $APP_NAME:latest .
            rm Dockerfile.temp

            docker run -d --name $APP_NAME -p $APP_PORT:$APP_PORT $APP_NAME:latest || true

            echo "🚀 Checking running containers..."
            docker ps -a

            # If container exited, show logs
            if [ "$(docker inspect -f '{{.State.Status}}' $APP_NAME)" != "running" ]; then
              echo "❌ Container failed to start. Logs:"
              docker logs $APP_NAME || true
              exit 1
            fi

            # -------------------------------
            # Cleanup old Docker resources
            # -------------------------------
            CURRENT_IMAGE_ID=$(docker images -q ${APP_NAME}:latest || true)
            CURRENT_CONTAINER_ID=$(docker ps -q --filter "name=${APP_NAME}" || true)

            echo "Keeping container: $CURRENT_CONTAINER_ID"
            echo "Keeping image: $CURRENT_IMAGE_ID"

            docker ps -a --filter "name=${APP_NAME}" --format "{{.ID}}" | grep -v "$CURRENT_CONTAINER_ID" | xargs -r docker rm -f
            docker images ${APP_NAME} --format "{{.ID}}" | grep -v "$CURRENT_IMAGE_ID" | xargs -r docker rmi -f

            docker image prune -f
            docker container prune -f
            docker volume prune -f
            docker network prune -f

            echo "✅ Cleanup completed. Current build is still running."
          EOF

  test:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Wait for app to be ready
        run: |
          echo "Waiting for app on port 8086..."
          MAX_RETRIES=40
          COUNT=0
          SUCCESS=0
          until [ $COUNT -ge $MAX_RETRIES ]; do
            if curl -s http://${{ secrets.VM_IP }}:8086/actuator/health | grep -q '"status":"UP"'; then
              SUCCESS=1
              break
            fi
            echo "App not ready yet. Retrying in 5s..."
            COUNT=$((COUNT+1))
            sleep 5
          done

          if [ $SUCCESS -ne 1 ]; then
            echo "❌ App failed to start. Fetching logs..."
            ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_IP }} "docker logs spring-app || true"
            exit 1
          fi

          echo "✅ App is running and healthy."
