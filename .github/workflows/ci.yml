name: Java CI with Docker

on:
  push:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Detect build tool and build project
        run: |
          if [ -f "pom.xml" ]; then
            echo "Maven project detected"
            mvn clean package -DskipTests
          elif [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
            echo "Gradle project detected"
            ./gradlew clean build -x test || gradle clean build -x test
          else
            echo "❌ No Maven or Gradle build file found!"
            exit 1
          fi

      - name: Build Docker image
        run: docker build -t java-app:latest .

      - name: Save Docker image as artifact
        run: docker save java-app:latest -o java-app.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: java-app
          path: java-app.tar
          retention-days: 1  # keep artifacts only for 1 day to save storage

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: java-app
          path: .

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy on VM
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
          # Ensure required packages are installed
          sudo apt-get update -y
          sudo apt-get install -y docker.io openjdk-17-jdk maven gradle || true

          # Load new image
          docker load -i /home/${{ secrets.VM_USER }}/java-app.tar || true

          # Delete old container if exists
          docker rm -f java-app || true

          # Run new container
          docker run -d --name java-app -p 8086:8086 java-app:latest

          # Cleanup old artifacts
          rm -f /home/${{ secrets.VM_USER }}/java-app.tar
          docker image prune -af
          EOF
