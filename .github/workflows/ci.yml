name: Java CI/CD with Docker (VM-Build Only)

on:
  push:
    branches: ["main"]

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Setup SSH Key
        run: |
          SSH_DIR=/home/runner/.ssh
          mkdir -p $SSH_DIR
          chmod 700 $SSH_DIR

          echo "${{ secrets.VM_SSH_KEY }}" | tr -d '\r' > $SSH_DIR/id_rsa
          chmod 600 $SSH_DIR/id_rsa

          ssh-keyscan -H ${{ secrets.VM_IP }} >> $SSH_DIR/known_hosts
          chmod 644 $SSH_DIR/known_hosts

          # Optional: test SSH connection
          ssh -i $SSH_DIR/id_rsa -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_IP }} "echo SSH connection successful"

      - name: Build & Deploy on VM
        run: |
          ssh -i /home/runner/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_IP }} << 'EOF'
            set -e

            # -------------------------------
            # Install required packages
            # -------------------------------
            command -v wget >/dev/null || sudo apt-get install -y wget
            command -v curl >/dev/null || sudo apt-get install -y curl
            command -v git >/dev/null || sudo apt-get install -y git
            command -v java >/dev/null || sudo apt-get install -y openjdk-17-jdk
            command -v docker >/dev/null || (curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh && sudo usermod -aG docker $USER)

            export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
            export PATH=$JAVA_HOME/bin:$PATH

            # -------------------------------
            # Prepare project directory
            # -------------------------------
            PROJECT_DIR=~/spring-github-hosted
            if [ ! -d "$PROJECT_DIR" ]; then
              git clone git@github.com:SaddamGulzar/spring-github-hosted.git $PROJECT_DIR
            fi
            cd $PROJECT_DIR
            git fetch --all
            git reset --hard origin/main

            # Make wrappers executable
            [ -f "./mvnw" ] && chmod +x ./mvnw
            [ -f "./gradlew" ] && chmod +x ./gradlew

            # -------------------------------
            # Detect build tool and build JAR
            # -------------------------------
            if [ -f "pom.xml" ] || [ -f "mvnw" ]; then
              ./mvnw clean package -DskipTests
              JAR_FILE=$(ls target/*.jar | head -n 1)
            elif [ -f "build.gradle" ] || [ -f "build.gradle.kts" ] || [ -f "gradlew" ]; then
              ./gradlew clean build -x test
              JAR_FILE=$(ls build/libs/*.jar | head -n 1)
            else
              echo "No Maven/Gradle build file found!"
              exit 1
            fi

            echo "JAR built at: $JAR_FILE"

            # -------------------------------
            # Stop old spring-app container & free port
            # -------------------------------
            docker rm -f spring-app || true
            if lsof -t -i :8086; then
              sudo lsof -t -i :8086 | xargs sudo kill -9 || true
            fi

            # -------------------------------
            # Copy JAR to Docker context, build & run Docker image
            # -------------------------------
            cp $JAR_FILE ./
            docker build --build-arg JAR_FILE=$(basename $JAR_FILE) -t spring-app:latest .
            docker run -d --name spring-app -p 8086:8086 spring-app:latest
            rm $(basename $JAR_FILE)

            # -------------------------------
            # Clean up
            # -------------------------------
            sudo apt-get clean
          EOF

  test:
    runs-on: ubuntu-latest
    needs: build-deploy

    steps:
      - name: Setup SSH Key for Test Job
        run: |
          SSH_DIR=/home/runner/.ssh
          mkdir -p $SSH_DIR
          chmod 700 $SSH_DIR

          echo "${{ secrets.VM_SSH_KEY }}" | tr -d '\r' > $SSH_DIR/id_rsa
          chmod 600 $SSH_DIR/id_rsa

          ssh-keyscan -H ${{ secrets.VM_IP }} >> $SSH_DIR/known_hosts
          chmod 644 $SSH_DIR/known_hosts

      - name: Wait for app to be ready
        run: |
          echo "Waiting for app on port 8086..."
          MAX_RETRIES=60
          COUNT=0
          SUCCESS=0
          until [ $COUNT -ge $MAX_RETRIES ]; do
            if curl -s http://${{ secrets.VM_IP }}:8086/actuator/health | grep -q '"status":"UP"'; then
              SUCCESS=1
              break
            fi
            echo "App not ready yet. Retrying in 5s..."
            sleep 5
            COUNT=$((COUNT+1))
          done

          if [ $SUCCESS -ne 1 ]; then
            echo "App did not start in time. Fetching container logs..."
            ssh -i /home/runner/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_IP }} "docker logs spring-app || true"
            exit 1
          fi

          echo "App is up and running!"

      # - name: Run tests on VM
      #   run: |
      #     ssh -i /home/runner/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_IP }} << EOF
      #       cd ~/spring-github-hosted
      #       if [ -f "pom.xml" ]; then
      #         ./mvnw test
      #       elif [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
      #         ./gradlew test
      #       fi
          EOF
