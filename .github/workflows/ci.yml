name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts

      - name: Build & Deploy on VM
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            set -e
            APP_NAME="spring-app"
            APP_PORT=8086
            PROJECT_DIR=~/spring-app

            # -------------------------------
            # Prepare project
            # -------------------------------
            if [ ! -d "$PROJECT_DIR" ]; then
              git clone git@github.com:<your-username>/<your-repo>.git $PROJECT_DIR
            fi
            cd $PROJECT_DIR
            git fetch --all
            git reset --hard origin/main

            # Make wrappers executable
            [ -f "./mvnw" ] && chmod +x ./mvnw
            [ -f "./gradlew" ] && chmod +x ./gradlew

            # -------------------------------
            # Build JAR
            # -------------------------------
            if [ -f "pom.xml" ] || [ -f "mvnw" ]; then
              ./mvnw clean package -DskipTests
              JAR_FILE=$(ls target/*.jar | head -n 1)
            elif [ -f "build.gradle" ] || [ -f "gradlew" ]; then
              ./gradlew clean build -x test
              JAR_FILE=$(ls build/libs/*.jar | head -n 1)
            else
              echo "No Maven/Gradle build file found!"
              exit 1
            fi
            echo "Built JAR: $JAR_FILE"

            # -------------------------------
            # Stop old container
            # -------------------------------
            docker stop $APP_NAME || true
            docker rm $APP_NAME || true

            # -------------------------------
            # Build Docker image
            # -------------------------------
            cp $JAR_FILE app.jar
            cat > Dockerfile.temp << DOCKER_EOF
            FROM eclipse-temurin:17-jdk-alpine
            WORKDIR /app
            COPY app.jar app.jar
            EXPOSE $APP_PORT
            ENTRYPOINT ["java","-jar","app.jar","--server.port=$APP_PORT"]
            DOCKER_EOF

            docker build -f Dockerfile.temp -t $APP_NAME:latest .
            rm Dockerfile.temp

            # -------------------------------
            # Start new container
            # -------------------------------
            docker run -d --name $APP_NAME -p $APP_PORT:8080 $APP_NAME:latest

            echo "✅ Deploy completed. Container is running."
            
            # -------------------------------
            # Cleanup old images & containers
            # -------------------------------
            CURRENT_IMAGE=$(docker images -q $APP_NAME:latest)
            CURRENT_CONTAINER=$(docker ps -q --filter "name=$APP_NAME")

            docker ps -a --filter "name=$APP_NAME" --format "{{.ID}}" | grep -v "$CURRENT_CONTAINER" | xargs -r docker rm -f
            docker images $APP_NAME --format "{{.ID}}" | grep -v "$CURRENT_IMAGE" | xargs -r docker rmi -f

            docker image prune -f
            docker container prune -f
            docker volume prune -f
            docker network prune -f
          EOF

  test:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Wait for app to be ready
        run: |
          echo "Waiting for app on port 8086..."
          MAX_RETRIES=40
          COUNT=0
          SUCCESS=0
          until [ $COUNT -ge $MAX_RETRIES ]; do
            if curl -s http://${{ secrets.VM_HOST }}:8086/actuator/health | grep -q '"status":"UP"'; then
              SUCCESS=1
              break
            fi
            echo "App not ready yet. Retrying in 5s..."
            COUNT=$((COUNT+1))
            sleep 5
          done

          if [ $SUCCESS -ne 1 ]; then
            echo "❌ App failed to start. Fetching container logs..."
            ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "docker logs spring-app || true"
            exit 1
          fi

          echo "✅ App is running and healthy."
